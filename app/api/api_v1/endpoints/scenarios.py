from fastapi import APIRouter, HTTPException
from typing import List
from pydantic import BaseModel
from datetime import datetime

router = APIRouter()

class ScenarioModel(BaseModel):
    id: str
    name: str
    description: str
    type: str
    complexity: str
    estimated_duration: int  # seconds
    enabled: bool

# Predefined scenarios
SCENARIOS = [
    {
        "id": "phishing",
        "name": "Phishing Campaign",
        "description": "Simulates phishing emails targeting users with malicious links and attachments.",
        "type": "attack",
        "complexity": "medium",
        "estimated_duration": 60,
        "enabled": True
    },
    {
        "id": "ransomware",
        "name": "Ransomware Attack",
        "description": "Simulates ransomware infection and file encryption across systems.",
        "type": "attack",
        "complexity": "high",
        "estimated_duration": 120,
        "enabled": True
    },
    {
        "id": "data_exfiltration",
        "name": "Data Exfiltration",
        "description": "Simulates unauthorized data access and exfiltration.",
        "type": "attack",
        "complexity": "high",
        "estimated_duration": 90,
        "enabled": True
    },
    {
        "id": "brute_force",
        "name": "Brute Force Attack",
        "description": "Simulates password guessing attempts against authentication systems.",
        "type": "attack",
        "complexity": "medium",
        "estimated_duration": 60,
        "enabled": True
    },
    {
        "id": "insider_threat",
        "name": "Insider Threat",
        "description": "Simulates suspicious activity from authorized users.",
        "type": "attack",
        "complexity": "high",
        "estimated_duration": 90,
        "enabled": True
    }
]

@router.get("/", response_model=List[ScenarioModel])
async def get_scenarios():
    """Get list of available scenarios."""
    return SCENARIOS

@router.get("/{scenario_id}", response_model=ScenarioModel)
async def get_scenario(scenario_id: str):
    """Get details about a specific scenario."""
    for scenario in SCENARIOS:
        if scenario["id"] == scenario_id:
            return scenario
            
    raise HTTPException(status_code=404, detail=f"Scenario {scenario_id} not found")

@router.get("/{scenario_id}/events")
async def get_scenario_events(scenario_id: str):
    """Get sample events generated by this scenario."""
    # Check if scenario exists
    scenario_exists = False
    for scenario in SCENARIOS:
        if scenario["id"] == scenario_id:
            scenario_exists = True
            break
            
    if not scenario_exists:
        raise HTTPException(status_code=404, detail=f"Scenario {scenario_id} not found")
    
    # Return demo events based on scenario type
    if scenario_id == "phishing":
        return [{
            "eventType": "email_received",
            "timestamp": datetime.utcnow().isoformat(),
            "source": "email_gateway",
            "sourceIp": "192.0.2.123",
            "destinationIp": "10.0.0.45",
            "user": "user12@company.com",
            "details": {
                "sender": "security@paypal-verify.net",
                "subject": "Your account needs attention",
                "attachmentName": "invoice.xlsx",
                "hasLink": True,
                "linkDomain": "security-verify-now.com",
                "passedFilter": True,
                "spamScore": 0.65
            }
        }]
    elif scenario_id == "ransomware":
        return [{
            "eventType": "endpoint_process_creation",
            "timestamp": datetime.utcnow().isoformat(),
            "source": "endpoint_agent",
            "hostname": "host-42",
            "username": "user27",
            "ipAddress": "10.1.42.53",
            "details": {
                "processName": "powershell.exe",
                "commandLine": "powershell.exe -nop -w hidden -encodedcommand JABzAD0ATgBlAHcALQ...",
                "processId": 3856,
                "parentProcessName": "outlook.exe",
                "parentProcessId": 2412
            }
        }]
    elif scenario_id == "data_exfiltration":
        return [{
            "eventType": "endpoint_file_access",
            "timestamp": datetime.utcnow().isoformat(),
            "source": "endpoint_agent",
            "hostname": "host-73",
            "username": "user42",
            "ipAddress": "10.2.1.73",
            "details": {
                "filePath": "D:\Shared\Customer Data\customer_database.csv",
                "operation": "read",
                "fileSize": 5832400,
                "success": True
            }
        }]
    elif scenario_id == "brute_force":
        return [{
            "eventType": "authentication",
            "timestamp": datetime.utcnow().isoformat(),
            "source": "ssh_logs",
            "sourceIp": "203.0.113.42",
            "user": "admin",
            "success": False,
            "details": {
                "service": "ssh",
                "method": "password",
                "failureReason": "invalid_password",
                "attemptCount": 5
            }
        }]
    elif scenario_id == "insider_threat":
        return [{
            "eventType": "endpoint_file_access",
            "timestamp": datetime.utcnow().isoformat(),
            "source": "endpoint_agent",
            "hostname": "host-86",
            "username": "user37",
            "ipAddress": "10.1.5.86",
            "details": {
                "filePath": "D:\HR Records\salary_data.xlsx",
                "operation": "read",
                "success": True,
                "fileSize": 4251324
            }
        }]
    else:
        return []
